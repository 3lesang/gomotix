/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PlayImport } from './routes/play'
import { Route as IndexImport } from './routes/index'
import { Route as SwapIndexImport } from './routes/swap/index'
import { Route as RoomIndexImport } from './routes/room/index'
import { Route as LeaderboardIndexImport } from './routes/leaderboard/index'
import { Route as RoomIdImport } from './routes/room/$id'

// Create/Update Routes

const PlayRoute = PlayImport.update({
  id: '/play',
  path: '/play',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SwapIndexRoute = SwapIndexImport.update({
  id: '/swap/',
  path: '/swap/',
  getParentRoute: () => rootRoute,
} as any)

const RoomIndexRoute = RoomIndexImport.update({
  id: '/room/',
  path: '/room/',
  getParentRoute: () => rootRoute,
} as any)

const LeaderboardIndexRoute = LeaderboardIndexImport.update({
  id: '/leaderboard/',
  path: '/leaderboard/',
  getParentRoute: () => rootRoute,
} as any)

const RoomIdRoute = RoomIdImport.update({
  id: '/room/$id',
  path: '/room/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/play': {
      id: '/play'
      path: '/play'
      fullPath: '/play'
      preLoaderRoute: typeof PlayImport
      parentRoute: typeof rootRoute
    }
    '/room/$id': {
      id: '/room/$id'
      path: '/room/$id'
      fullPath: '/room/$id'
      preLoaderRoute: typeof RoomIdImport
      parentRoute: typeof rootRoute
    }
    '/leaderboard/': {
      id: '/leaderboard/'
      path: '/leaderboard'
      fullPath: '/leaderboard'
      preLoaderRoute: typeof LeaderboardIndexImport
      parentRoute: typeof rootRoute
    }
    '/room/': {
      id: '/room/'
      path: '/room'
      fullPath: '/room'
      preLoaderRoute: typeof RoomIndexImport
      parentRoute: typeof rootRoute
    }
    '/swap/': {
      id: '/swap/'
      path: '/swap'
      fullPath: '/swap'
      preLoaderRoute: typeof SwapIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/play': typeof PlayRoute
  '/room/$id': typeof RoomIdRoute
  '/leaderboard': typeof LeaderboardIndexRoute
  '/room': typeof RoomIndexRoute
  '/swap': typeof SwapIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/play': typeof PlayRoute
  '/room/$id': typeof RoomIdRoute
  '/leaderboard': typeof LeaderboardIndexRoute
  '/room': typeof RoomIndexRoute
  '/swap': typeof SwapIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/play': typeof PlayRoute
  '/room/$id': typeof RoomIdRoute
  '/leaderboard/': typeof LeaderboardIndexRoute
  '/room/': typeof RoomIndexRoute
  '/swap/': typeof SwapIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/play' | '/room/$id' | '/leaderboard' | '/room' | '/swap'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/play' | '/room/$id' | '/leaderboard' | '/room' | '/swap'
  id:
    | '__root__'
    | '/'
    | '/play'
    | '/room/$id'
    | '/leaderboard/'
    | '/room/'
    | '/swap/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PlayRoute: typeof PlayRoute
  RoomIdRoute: typeof RoomIdRoute
  LeaderboardIndexRoute: typeof LeaderboardIndexRoute
  RoomIndexRoute: typeof RoomIndexRoute
  SwapIndexRoute: typeof SwapIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PlayRoute: PlayRoute,
  RoomIdRoute: RoomIdRoute,
  LeaderboardIndexRoute: LeaderboardIndexRoute,
  RoomIndexRoute: RoomIndexRoute,
  SwapIndexRoute: SwapIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/play",
        "/room/$id",
        "/leaderboard/",
        "/room/",
        "/swap/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/play": {
      "filePath": "play.tsx"
    },
    "/room/$id": {
      "filePath": "room/$id.tsx"
    },
    "/leaderboard/": {
      "filePath": "leaderboard/index.tsx"
    },
    "/room/": {
      "filePath": "room/index.tsx"
    },
    "/swap/": {
      "filePath": "swap/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
